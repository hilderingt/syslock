#!/bin/sh

recover_rootmnt()
{
    mount --move ${1} ${rootmnt} || mount -o move ${1} ${rootmnt}
    if [ $? -ne 0 ]; then
       panic "${progname}: failed to recover root filesystem to '${rootmnt}'"
    fi
}

case "$1" in
    prereqs)
    	echo ""
    	exit 0 ;;
esac

. /scripts/functions

progname="lockroot"
nolock_file="/nolock"

nolock=
for param in $(cat /proc/cmdline); do
    case ${param} in
        nolock)
            nolock=true ;;
    esac
done

if [ "x${nolock}" = "xtrue" ]; then
    log_warning_msg "${progname}: disabled, found kernel boot parameter 'nolock'"
    exit 0
fi

if [ -e "${rootmnt}${nolock_file}" ]; then
    log_warning_msg "${progname}: disabled, found file '${rootmnt}${nolock_file}'"
    exit 0
fi

ovl_mount=/mnt/overlay
ovl_base=/.lock
ovl_upper=${ovl_base}/rw
ovl_lower=${ovl_base}/ro
ovl_work=${ovl_base}/.work

[ -d ${ovl_base} ] || mkdir -p ${ovl_base}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to create '${ovl_base}'"
    exit 0
fi

mount -t tmpfs tmpfs-root ${ovl_base}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to create tmpfs for root filesystem"
    exit 0
fi

[ -d ${ovl_upper} ] || mkdir -p ${ovl_upper}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to create '${ovl_upper}'"
    exit 0
fi

[ -d ${ovl_lower} ] || mkdir -p ${ovl_lower}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to create '${ovl_lower}'"
    exit 0
fi

[ -d ${ovl_work} ] || mkdir -p ${ovl_work}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to create '${ovl_work}'"
    exit 0
fi

mount --move ${rootmnt} ${ovl_lower} || mount -o move ${rootmnt} ${ovl_lower}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to move root filesystem from '${rootmnt}' to '${ovl_lower}'"
    exit 0
fi

[ -d ${ovl_mount} ] || mkdir -p ${ovl_mount}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to create '${ovl_mount}'"
    recover_rootmnt "${ovl_lower}"
    exit 0
fi

mount -t overlay -o lowerdir=${ovl_lower},upperdir=${ovl_upper},workdir=${ovl_work} overlay-root ${ovl_mount}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to create overlay for root filesystem"
    recover_rootmnt "${ovl_lower}"
    exit 0
fi

[ -d ${ovl_mount}${ovl_base} ] || mkdir -p ${ovl_mount}${ovl_base}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to create '${ovl_mount}${ovl_base}'"
    recover_rootmnt "${ovl_lower}"
    exit 0
fi

mount --move ${ovl_base} ${ovl_mount}${ovl_base} || mount -o move ${ovl_base} ${ovl_mount}${ovl_base}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to move '${ovl_base}' to '${ovl_mount}${ovl_base}'"
    recover_rootmnt "${ovl_lower}"
    exit 0
fi

fstab_system=${ovl_mount}${ovl_lower}/etc/fstab
fstab_overlay=${ovl_mount}/etc/fstab

cat <<EOF >${fstab_overlay}
#
#  modified by lockroot at startup
#
EOF

grep -v '^[[:blank:]]*\(#\|$\)' ${fstab_system} |
while IFS= read -r entry; do
    echo "${entry}" | read -r source target fstype mntopts dump pass

    if [ "x${target}" = "x/" -o "x${fstype}" = "xswap" ]; then
        echo "#${entry}"
        continue
    fi

    if [ "x${fstype}" = "xnone" -o "x${fstype}" = "xignore" -o "x${fstype}" = "xtmpfs" ]
        echo "${entry}"
        continue
    fi

    echo "${mntopts}" | grep -q '\(noauto\|r\?bind\)' && echo "${entry}" && continue

    case "${source}" in
        UUID=*|LABEL=*|/*)
            echo "${source} ${target} lockdev devfs=${fstype},${mntopts} ${dump} ${pass}" ;;
        *)
            echo "${entry}" ;;
    esac
done >${fstab_overlay}

mount --move ${ovl_mount} ${rootmnt} || mount -o move ${ovl_mount} ${rootmnt}
if [ ${?} -ne 0 ]; then
    log_failure_msg "${progname}: failed to move '${ovl_mount}' to '${rootmnt}'"
    recover_rootmnt "${ovl_mount}${ovl_lower}"
    exit 0
fi

log_success_msg "${progname}: sucessfully set up overlay for root filesystem"

exit 0